
Eccles: v0.0.0.3

 Eccles is the Entity Component System Module of this project
 it provides a compositional system for creating entities that
 can be dynamically modified during runtime by adding and removing 
 Components that are automatically handled by Systems, this helps 
 decouple data from functions, and allows for new modules to be 
 introduced with ease 

    Core module that contains the core objects that makes up the ECS system, contains:
 
    # Component #

    This is the core data holder within the system, systems will enact upon the data stored in components,
    and generally, except for special cases, should contain no methods besides getters/setters

    during thair init they add themselves to lists of their component type, this is so Systems can operate on them faster
    rather than having to do lossy lookups on entities aka if Entity has such and such do thing
    this way our systems only ever operate on the components used in said systems

    has abstract methods:

        >>> get_value()

        >>> set_value(*args, **kwargs)
            *arg/**kwargs are for the user to implement

        >>> is_attached()
            check to see if component is attached to an entity
    
 
    # CoreException #

    Core exception for the ECS module, called by Entity, Component and System
    will tell you what object and function failed, what the parameters were (if supplied)
    and a message of what went wrong


    >>> CoreException(object, message, *args, **kwargs
        object = the object that has errored
        message = the message to be printed
        *args/**kwargs = the args passed to the errored object
 
    # Entity #

    Core entity of the ECS system, this class is an intermediary object that links Components with Systems, in a fashion
    that allows the user to perform operations easily on an entity by entity basis.

    This class shouldn't have to be expanded upon as they are composed with components and managed by systems and
    all attached components become members of the Entity by default

    >>> Entity(*_components)
        *_components = any number of components to be attached to the entity

    >>> attach(*_components)
        *_componets = a list of component to attach to the entity

    >>> detach(*_components)
        detaches components from the entity

    >>> from_archetype(bluprint, name, class_dict)
        bluprint = a list of component to assign to the entity
        name = the name of the resulting type
        class_dict = a dict of objects to add as members of the class
    
 
    # System #

    Core System object for the ECS system,
    this deals in data management and manipulation and only ever operates on a predefined set of components
    this helps keep data organized, allows for modularization and ease of updating

    >>> collect()
        method used to collect components from lists and organize the data for processing

    >>> update(*component_list)
        if provided a list of components (in the correct structure for said system)
        will perform systems update operations on them, if not provided args will
        process in the default fashion by using the collect method

    >>> start()
        starts the processing thread, small amount of init

    >>> run()
        triggered by start method and runs the update cycle
    
# common #

    Module to help cut down on code repetition, 
    if you find yourself repeating lines over and over 
    you may find a default for it here, this module also 
    includes common math functions, string functions etc
    
# common defaults #

    script for variables, methods and arguments that represent default values
    
# common math functions # 

    script for math functions that will see regular use
    
# common string functions #

    script for string functions that will see regular use

